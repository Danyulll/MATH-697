library(gtools)
lasso_scad_cox_sim = function(N,n){   # N:simulation times; n:data pts
Beta = c(0.8,0,0,1,0,0,0.6,0)
p = length(Beta) # number of coeff
corr = matrix(NA,p,p)
x = matrix(NA,n,p)
ME_part = rep(NA,N) # To store model error
ME_LASSO = rep(NA,N)
Beta_part_all = matrix(NA,N,p)
Beta_LASSO_all = matrix(NA,N,p)
ME_part_2 = rep(NA,N) # To store model error
ME_SCAD = rep(NA,N)
Beta_part_all_2 = matrix(NA,N,p)
Beta_SCAD_all = matrix(NA,N,p)
t = 1
while(t <= N){
# print(t)
# Step1: Set up correlation matrix
for(i in 1:p){
for(j in 1:p){
corr[i,j] = (0.5)^(abs(i-j))
}
}
# Step2: Simulate n data pts
x = mvrnorm(n, rep(0,p), Sigma = corr)
x = scale(x) #scale to make sure coeff are in same unit
# Step3: Generate time "y" using h(t)
y = rexp(n,rate=exp(x %*% Beta))
# Step4: Generating censoring time "cen" using mean U*h(t)
U = runif(n, min = 1, max = 3) # U is uniformly distributed on [1,3]
cen = U
# Step5: Add status based on censoring time "cen" and actual survival time "y"
status = as.numeric(y <= cen) # 1 if death, 0 if censored
# Step6: Fit by Cox's PH model with LASSO
time = pmin(y,cen) # time until death or censoring
fit_LASSO = cv.glmnet(x, Surv(time,status), family = "cox",alpha=1)
fit_SCAD <-  cv.ncvsurv(x, Surv(time,status), penalty = "SCAD",gamma=3.7)
Beta_LASSO = as.vector(coef(fit_LASSO, s = fit_LASSO$lambda.min))
Beta_SCAD <- as.vector(coef(fit_SCAD, s = fit_SCAD$lambda.min))
Beta_LASSO_all[t,] =  Beta_LASSO # Store the estimated beta simulated this time
Beta_SCAD_all[t,] <- Beta_SCAD
# Step7: Fit by Cox's PH model with partial likelihood by default
# so that we can compute MRME later
fit_part = coxph(Surv(time,status)~x)
Beta_part = as.numeric(coef(fit_part))
Beta_part_all[t,] = Beta_part
# Step8: Compute Model Error
# ME_part[t] =  t(exp(x%*%Beta_part_all[t,])-exp(x%*%Beta))%*%(exp(x%*%Beta_part_all[t,])-exp(x%*%Beta))
# ME_LASSO[t] = t(exp(x%*%Beta_LASSO_all[t,])-exp(x%*%Beta))%*%(exp(x%*%Beta_LASSO_all[t,])-exp(x%*%Beta))
# ME_SCAD[t] = t(exp(x%*%Beta_SCAD_all[t,])-exp(x%*%Beta))%*%(exp(x%*%Beta_SCAD_all[t,])-exp(x%*%Beta))
ME_part[t] =  mean((exp(-x%*%Beta_part_all[t,])-exp(-x%*%Beta))^2)
ME_LASSO[t] = mean((exp(-x%*%Beta_LASSO_all[t,])-exp(-x%*%Beta))^2)
ME_SCAD[t] = mean((exp(-x%*%Beta_SCAD_all[t,])-exp(-x%*%Beta))^2)
t = t+1
}
# Take mean, std of each coeff
Beta_part_mean = colMeans(Beta_part_all)
Beta_LASSO_mean = colMeans(Beta_LASSO_all)
Beta_SCAD_mean <- colMeans(Beta_SCAD_all)
Beta_part_std = apply(Beta_part_all,2,sd)
Beta_LASSO_std = apply(Beta_LASSO_all,2,sd)
Beta_SCAD_std = apply(Beta_SCAD_all,2,sd)
# Count avg correct and incorrect zero coeff of LASSO model
avg_correct_LASSO = mean(rowSums(abs(Beta_LASSO_all[,c(2,3,5,6,8)])<0.01))
avg_correct_SCAD = mean(rowSums(abs(Beta_SCAD_all[,c(2,3,5,6,8)])<0.01))
avg_incorrect_LASSO = mean(rowSums(abs(Beta_LASSO_all[,c(1,4,7)])<0.01))
avg_incorrect_SCAD = mean(rowSums(abs(Beta_SCAD_all[,c(1,4,7)])<0.01))
# Generate Table
list(
Initial_Beta = Beta,
Estimate_Beta_LASSO = Beta_LASSO_mean,
Estimate_Beta_SCAD = Beta_SCAD_mean,
Simulate_Beta_LASSO_std = Beta_LASSO_std,
Simulate_Beta_SCAD_std = Beta_SCAD_std,
Ave_Num_of_Zero_coeff_LASSO = c(avg_correct_LASSO,avg_incorrect_LASSO),
Ave_Num_of_Zero_coeff_SCAD = c(avg_correct_SCAD,avg_incorrect_SCAD),
MRME_LASSO = median(ME_LASSO/ME_part) * 100,
MRME_SCAD = median(ME_SCAD/ME_part) * 100
)
}
set.seed(123)
lasso_scad_cox_sim_75.out <- lasso_scad_cox_sim(N = 100, n = 75)
lasso_scad_cox_sim_100.out <- lasso_scad_cox_sim(N = 100, n = 100)
aic_bic_simulation <- function(N, n) {
Beta <- c(0.8, 0, 0, 1, 0, 0, 0.6, 0)  # True coefficients
p <- length(Beta)
Beta_part_all = matrix(NA,N,p)
ME_part = rep(NA,N)
combinations_list <- lapply(1:p, function(r) {
comb <- combinations(n = p, r = r)
# Pad the combinations with NA to ensure they all have p columns
padded_comb <- matrix(NA, nrow = nrow(comb), ncol = p)
for (i in 1:nrow(comb)) {
padded_comb[i, comb[i, ]] <- comb[i, ]
}
return(padded_comb)
})
all_combinations <- do.call(rbind, combinations_list)
m <- nrow(all_combinations)
t <- 1
best_fit_AIC <- vector("list", N)
best_fit_BIC <- vector("list", N)
best_AICs <- numeric(N)
best_BICs <- numeric(N)
best_fit_AIC_indices <- vector("list", N)
best_fit_BIC_indices <- vector("list", N)
ME_AIC <- numeric(N)
ME_BIC <- numeric(N)
while (t <= N) {
# Step 1: Generate correlation matrix
corr <- matrix(NA, p, p)
for (i in 1:p) {
for (j in 1:p) {
corr[i, j] <- (0.5) ^ (abs(i - j))
}
}
# Step 2: Simulate data points
x <- mvrnorm(n, rep(0, p), Sigma = corr)
x <- scale(x) # Scale to make sure coefficients are in the same unit
# Step 3: Generate survival time "y" using h(t)
y <- rexp(n, rate = exp(x %*% Beta))
# Step 4: Generate censoring time "cen"
U = runif(n, min = 1, max = 3) # U is uniformly distributed on [1,3]
cen = U
# Step 5: Add status based on censoring time "cen" and actual survival time "y"
status <- as.numeric(y <= cen) # 1 if death, 0 if censored
# Step 6: Fit Cox PH model for each combination of covariates
time <- pmin(y, cen) # Time until death or censoring
# need to figure out where this goes!!!!!!!!!!!!!!!
fit_part = coxph(Surv(time,status)~x)
Beta_part = as.numeric(coef(fit_part))
Beta_part_all[t,] = Beta_part
AICs <- rep(Inf, m)
BICs <- rep(Inf, m)
fits <- vector("list", m)
combination_indices <- vector("list", m)
for (i in 1:m) {
covariate_indices <- which(!is.na(all_combinations[i, ]))
covariates <- x[, covariate_indices, drop = FALSE]
fit <- tryCatch(coxph(Surv(time, status) ~ covariates), error = function(e) NULL)
if (!is.null(fit)) {
fits[[i]] <- fit
AICs[i] <- AIC(fit)
BICs[i] <- BIC(fit)
combination_indices[[i]] <- covariate_indices
}
}
best_AIC_idx <- which.min(AICs)
best_BIC_idx <- which.min(BICs)
if (is.finite(AICs[best_AIC_idx])) {
best_fit_AIC[[t]] <- fits[[best_AIC_idx]]
best_fit_AIC_indices[[t]] <- combination_indices[[best_AIC_idx]]
best_AICs[t] <- AICs[best_AIC_idx]
} else {
best_fit_AIC[[t]] <- NULL
best_fit_AIC_indices[[t]] <- NULL
best_AICs[t] <- NA
}
if (is.finite(BICs[best_BIC_idx])) {
best_fit_BIC[[t]] <- fits[[best_BIC_idx]]
best_fit_BIC_indices[[t]] <- combination_indices[[best_BIC_idx]]
best_BICs[t] <- BICs[best_BIC_idx]
} else {
best_fit_BIC[[t]] <- NULL
best_fit_BIC_indices[[t]] <- NULL
best_BICs[t] <- NA
}
# Step 7: Compute Model Error for AIC and BIC models
if (!is.null(best_fit_AIC_indices[[t]])) {
selected_indices_AIC <- best_fit_AIC_indices[[t]]
Beta_AIC <- numeric(p)
Beta_AIC[selected_indices_AIC] <- coef(best_fit_AIC[[t]])
ME_AIC[t] <- mean((exp(-x %*% Beta_AIC) - exp(-x %*% Beta))^2)
} else {
ME_AIC[t] <- NA
}
if (!is.null(best_fit_BIC_indices[[t]])) {
selected_indices_BIC <- best_fit_BIC_indices[[t]]
Beta_BIC <- numeric(p)
Beta_BIC[selected_indices_BIC] <- coef(best_fit_BIC[[t]])
ME_BIC[t] <- mean((exp(-x %*% Beta_BIC) - exp(-x %*% Beta))^2)
ME_part[t] =  mean((exp(-x%*%Beta_part_all[t,])-exp(-x%*%Beta))^2) # may need to add this to aic sec
} else {
ME_BIC[t] <- NA
}
t <- t + 1
}
correct_zero_AIC <- rep(0, N)
correct_zero_BIC <- rep(0, N)
incorrect_nonzero_AIC <- rep(0, N)
incorrect_nonzero_BIC <- rep(0, N)
for (i in 1:N) {
true_zero_indices <- which(Beta == 0)
true_nonzero_indices <- which(Beta != 0)
# For AIC
if (!is.null(best_fit_AIC_indices[[i]])) {
selected_indices_AIC <- best_fit_AIC_indices[[i]]
excluded_indices_AIC <- setdiff(1:length(Beta), selected_indices_AIC)
correct_zero_AIC[i] <- sum(excluded_indices_AIC %in% true_zero_indices)
incorrect_nonzero_AIC[i] <- sum(excluded_indices_AIC %in% true_nonzero_indices)
}
# For BIC
if (!is.null(best_fit_BIC_indices[[i]])) {
selected_indices_BIC <- best_fit_BIC_indices[[i]]
excluded_indices_BIC <- setdiff(1:length(Beta), selected_indices_BIC)
correct_zero_BIC[i] <- sum(excluded_indices_BIC %in% true_zero_indices)
incorrect_nonzero_BIC[i] <- sum(excluded_indices_BIC %in% true_nonzero_indices)
}
}
# Calculate the average number of correctly estimated zero coefficients for AIC and BIC
avg_correct_zero_AIC <- mean(correct_zero_AIC)
avg_correct_zero_BIC <- mean(correct_zero_BIC)
# Calculate the average number of incorrectly estimated non-zero coefficients for AIC and BIC
avg_incorrect_nonzero_AIC <- mean(incorrect_nonzero_AIC)
avg_incorrect_nonzero_BIC <- mean(incorrect_nonzero_BIC)
# Create summary tables
tb2_AIC_BIC <- data.frame(zero_coeff_AIC = avg_correct_zero_AIC, zero_coeff_BIC = avg_correct_zero_BIC, incorrect_nonzero_AIC = avg_incorrect_nonzero_AIC, incorrect_nonzero_BIC = avg_incorrect_nonzero_BIC)
tb3_AIC_BIC <- data.frame(MRME_AIC = median(ME_AIC/ME_part, na.rm = TRUE) * 100, MRME_BIC = median(ME_BIC/ME_part, na.rm = TRUE) * 100)
list(tb2_AIC_BIC = tb2_AIC_BIC, tb3_AIC_BIC = tb3_AIC_BIC)
}
# Example usage
aic_bic_simulation_75.out <- aic_bic_simulation(N = 100, n = 75)
aic_bic_simulation_100.out <- aic_bic_simulation(N = 100, n = 100)
# Load necessary library
library(knitr)
# Create the data for the table
data <- data.frame(
Column1 = c("**n=75**","SCAD","LASSO","AIC","BIC","**n=100**","SCAD","LASSO","AIC","BIC"),
Column2 = c("",round(lasso_scad_cox_sim_75.out$MRME_SCAD,2) ,
round(lasso_scad_cox_sim_75.out$MRME_LASSO,2),
aic_bic_simulation_75.out$tb3_AIC_BIC$MRME_AIC,
aic_bic_simulation_75.out$tb3_AIC_BIC$MRME_BIC,
"",
round(lasso_scad_cox_sim_100.out$MRME_SCAD,2),
round(lasso_scad_cox_sim_100.out$MRME_LASSO,2),
aic_bic_simulation_100.out$tb3_AIC_BIC$MRME_AIC,
aic_bic_simulation_100.out$tb3_AIC_BIC$MRME_BIC),
Column3 = c("",
round(lasso_scad_cox_sim_75.out$Ave_Num_of_Zero_coeff_SCAD[1],2),
round(lasso_scad_cox_sim_75.out$Ave_Num_of_Zero_coeff_LASSO[1],2),
aic_bic_simulation_75.out$tb2_AIC_BIC$zero_coeff_AIC,
aic_bic_simulation_75.out$tb2_AIC_BIC$zero_coeff_BIC,
"",
round(lasso_scad_cox_sim_100.out$Ave_Num_of_Zero_coeff_SCAD[1],2),
round(lasso_scad_cox_sim_100.out$Ave_Num_of_Zero_coeff_LASSO[1],2),
aic_bic_simulation_100.out$tb2_AIC_BIC$zero_coeff_AIC,
aic_bic_simulation_100.out$tb2_AIC_BIC$zero_coeff_BIC),
Column4 = c("",
round(lasso_scad_cox_sim_75.out$Ave_Num_of_Zero_coeff_SCAD[2],2),
round(lasso_scad_cox_sim_75.out$Ave_Num_of_Zero_coeff_LASSO[2],2),
aic_bic_simulation_75.out$tb2_AIC_BIC$incorrect_nonzero_AIC,
aic_bic_simulation_75.out$tb2_AIC_BIC$incorrect_nonzero_BIC,
"",
round(lasso_scad_cox_sim_100.out$Ave_Num_of_Zero_coeff_SCAD[2],2),
round(lasso_scad_cox_sim_100.out$Ave_Num_of_Zero_coeff_LASSO[2],2),
aic_bic_simulation_100.out$tb2_AIC_BIC$incorrect_nonzero_AIC,
aic_bic_simulation_100.out$tb2_AIC_BIC$incorrect_nonzero_BIC)
)
# Print the table using kable
kable(data, col.names = c("Method", "MRME(%)", "Aver. no. cor. 0 coeff.", "Aver. no. incor. 0 coeff."))
data(pbc)
library(survival)
data(pbc)
head(pbc)
aic_bic_simulation_75.out
lasso_scad_cox_sim_75.out
bic_simulation <- function(N, n) {
Beta <- c(0.8, 0, 0, 1, 0, 0, 0.6, 0)  # True coefficients
p <- length(Beta)
Beta_part_all = matrix(NA, N, p)
ME_part = rep(NA, N)
combinations_list <- lapply(1:p, function(r) {
comb <- combinations(n = p, r = r)
# Pad the combinations with NA to ensure they all have p columns
padded_comb <- matrix(NA, nrow = nrow(comb), ncol = p)
for (i in 1:nrow(comb)) {
padded_comb[i, comb[i, ]] <- comb[i, ]
}
return(padded_comb)
})
all_combinations <- do.call(rbind, combinations_list)
m <- nrow(all_combinations)
t <- 1
best_fit_AIC <- vector("list", N)
best_fit_BIC <- vector("list", N)
best_AICs <- numeric(N)
best_BICs <- numeric(N)
best_fit_AIC_indices <- vector("list", N)
best_fit_BIC_indices <- vector("list", N)
ME_AIC <- numeric(N)
ME_BIC <- numeric(N)
while (t <= N) {
# Step 1: Generate correlation matrix
corr <- matrix(NA, p, p)
for (i in 1:p) {
for (j in 1:p) {
corr[i, j] <- (0.5) ^ (abs(i - j))
}
}
# Step 2: Simulate data points
x <- mvrnorm(n, rep(0, p), Sigma = corr)
x <- scale(x) # Scale to make sure coefficients are in the same unit
# Step 3: Generate survival time "y" using h(t)
y <- rexp(n, rate = exp(x %*% Beta))
# Step 4: Generate censoring time "cen"
U = runif(n, min = 1, max = 3) # U is uniformly distributed on [1,3]
cen = U
# Step 5: Add status based on censoring time "cen" and actual survival time "y"
status <- as.numeric(y <= cen) # 1 if death, 0 if censored
# Step 6: Fit Cox PH model for each combination of covariates
time <- pmin(y, cen) # Time until death or censoring
fit_part = coxph(Surv(time, status) ~ x)
Beta_part = as.numeric(coef(fit_part))
Beta_part_all[t, ] = Beta_part
AICs <- rep(Inf, m)
BICs <- rep(Inf, m)
fits <- vector("list", m)
combination_indices <- vector("list", m)
for (i in 1:m) {
covariate_indices <- which(!is.na(all_combinations[i, ]))
covariates <- x[, covariate_indices, drop = FALSE]
fit <- tryCatch(coxph(Surv(time, status) ~ covariates), error = function(e) NULL)
if (!is.null(fit)) {
fits[[i]] <- fit
AICs[i] <- AIC(fit)
BICs[i] <- BIC(fit)
combination_indices[[i]] <- covariate_indices
}
}
best_AIC_idx <- which.min(AICs)
best_BIC_idx <- which.min(BICs)
if (is.finite(AICs[best_AIC_idx])) {
best_fit_AIC[[t]] <- fits[[best_AIC_idx]]
best_fit_AIC_indices[[t]] <- combination_indices[[best_AIC_idx]]
best_AICs[t] <- AICs[best_AIC_idx]
} else {
best_fit_AIC[[t]] <- NULL
best_fit_AIC_indices[[t]] <- NULL
best_AICs[t] <- NA
}
if (is.finite(BICs[best_BIC_idx])) {
best_fit_BIC[[t]] <- fits[[best_BIC_idx]]
best_fit_BIC_indices[[t]] <- combination_indices[[best_BIC_idx]]
best_BICs[t] <- BICs[best_BIC_idx]
} else {
best_fit_BIC[[t]] <- NULL
best_fit_BIC_indices[[t]] <- NULL
best_BICs[t] <- NA
}
# Step 7: Compute Model Error for AIC and BIC models
if (!is.null(best_fit_AIC_indices[[t]])) {
selected_indices_AIC <- best_fit_AIC_indices[[t]]
Beta_AIC <- numeric(p)
Beta_AIC[selected_indices_AIC] <- coef(best_fit_AIC[[t]])
ME_AIC[t] <- mean((exp(-x %*% Beta_AIC) - exp(-x %*% Beta))^2)
} else {
ME_AIC[t] <- NA
}
if (!is.null(best_fit_BIC_indices[[t]])) {
selected_indices_BIC <- best_fit_BIC_indices[[t]]
Beta_BIC <- numeric(p)
Beta_BIC[selected_indices_BIC] <- coef(best_fit_BIC[[t]])
ME_BIC[t] <- mean((exp(-x %*% Beta_BIC) - exp(-x %*% Beta))^2)
ME_part[t] <- mean((exp(-x %*% Beta_part_all[t, ]) - exp(-x %*% Beta))^2)
} else {
ME_BIC[t] <- NA
}
t <- t + 1
}
correct_zero_AIC <- rep(0, N)
correct_zero_BIC <- rep(0, N)
incorrect_nonzero_AIC <- rep(0, N)
incorrect_nonzero_BIC <- rep(0, N)
for (i in 1:N) {
true_zero_indices <- which(Beta == 0)
true_nonzero_indices <- which(Beta != 0)
# For AIC
if (!is.null(best_fit_AIC_indices[[i]])) {
selected_indices_AIC <- best_fit_AIC_indices[[i]]
excluded_indices_AIC <- setdiff(1:length(Beta), selected_indices_AIC)
correct_zero_AIC[i] <- sum(excluded_indices_AIC %in% true_zero_indices)
incorrect_nonzero_AIC[i] <- sum(excluded_indices_AIC %in% true_nonzero_indices)
}
# For BIC
if (!is.null(best_fit_BIC_indices[[i]])) {
selected_indices_BIC <- best_fit_BIC_indices[[i]]
excluded_indices_BIC <- setdiff(1:length(Beta), selected_indices_BIC)
correct_zero_BIC[i] <- sum(excluded_indices_BIC %in% true_zero_indices)
incorrect_nonzero_BIC[i] <- sum(excluded_indices_BIC %in% true_nonzero_indices)
}
}
# Calculate the average number of correctly estimated zero coefficients for AIC and BIC
avg_correct_zero_AIC <- mean(correct_zero_AIC)
avg_correct_zero_BIC <- mean(correct_zero_BIC)
# Calculate the average number of incorrectly estimated non-zero coefficients for AIC and BIC
avg_incorrect_nonzero_AIC <- mean(incorrect_nonzero_AIC)
avg_incorrect_nonzero_BIC <- mean(incorrect_nonzero_BIC)
# Create summary tables
tb2_AIC_BIC <- data.frame(zero_coeff_AIC = avg_correct_zero_AIC, zero_coeff_BIC = avg_correct_zero_BIC, incorrect_nonzero_AIC = avg_incorrect_nonzero_AIC, incorrect_nonzero_BIC = avg_incorrect_nonzero_BIC)
tb3_AIC_BIC <- data.frame(MRME_AIC = median(ME_AIC / ME_part, na.rm = TRUE) * 100, MRME_BIC = median(ME_BIC / ME_part, na.rm = TRUE) * 100)
# Calculate mean and standard deviation for beta_1, beta_4, beta_7
beta_1_stats <- c(mean = mean(Beta_part_all[, 1], na.rm = TRUE), sd = sd(Beta_part_all[, 1], na.rm = TRUE))
beta_4_stats <- c(mean = mean(Beta_part_all[, 4], na.rm = TRUE), sd = sd(Beta_part_all[, 4], na.rm = TRUE))
beta_7_stats <- c(mean = mean(Beta_part_all[, 7], na.rm = TRUE), sd = sd(Beta_part_all[, 7], na.rm = TRUE))
beta_stats <- data.frame(beta_1_stats, beta_4_stats, beta_7_stats)
list(tb2_AIC_BIC = tb2_AIC_BIC, tb3_AIC_BIC = tb3_AIC_BIC, beta_stats = beta_stats)
}
# Example usage
aic_bic_simulation_75.out <- bic_simulation(N = 100, n = 75)
aic_bic_simulation_100.out <- bic_simulation(N = 100, n = 100)
aic_bic_simulation_75.out
lasso_scad_cox_sim_75.out
lasso_scad_cox_sim_75.out$Estimate_Beta_SCAD
aic_bic_simulation_75.out
aic_bic_simulation_75.out$beta_stats
aic_bic_simulation_75.out$beta_stats$beta_1_stats
aic_bic_simulation_75.out
lasso_scad_cox_sim_75.out$Estimate_Beta_SCAD
aic_bic_simulation_75.out$beta_stats$beta_1_stats
lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[1]
lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD
lasso_scad_cox_sim_75.out$Estimate_Beta_SCAD
# Create the data for the table
data <- data.frame(
Column1 = c("**n=75**","SCAD","LASSO","AIC","BIC","**n=100**","SCAD","LASSO","AIC/BIC"),
Column2 = c("",round(lasso_scad_cox_sim_75.out$Estimate_Beta_SCAD[1],2) ,
round(lasso_scad_cox_sim_75.out$Estimate_Beta_LASSO[1],2),
aic_bic_simulation_75.out$beta_stats$beta_1_stats[2],
"",
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[1],2),
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[1],2),
aic_bic_simulation_100.out$beta_stats$beta_1_stats[2]),
Column3 = c("",
round(lasso_scad_cox_sim_75.out$Estimate_Beta_SCAD[4],2) ,
round(lasso_scad_cox_sim_75.out$Estimate_Beta_LASSO[4],2),
aic_bic_simulation_75.out$beta_stats$beta_4_stats[2],
"",
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[4],2),
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[4],2),
aic_bic_simulation_100.out$beta_stats$beta_4_stats[2]),
Column4 = c("",round(lasso_scad_cox_sim_75.out$Estimate_Beta_SCAD[7],2) ,
round(lasso_scad_cox_sim_75.out$Estimate_Beta_LASSO[7],2),
aic_bic_simulation_75.out$beta_stats$beta_7_stats[2],
"",
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[7],2),
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[7],2),
aic_bic_simulation_100.out$beta_stats$beta_7_stats[2])
)
# Create the data for the table
data <- data.frame(
Column1 = c("**n=75**","SCAD","LASSO","AIC/BIC","**n=100**","SCAD","LASSO","AIC/BIC"),
Column2 = c("",round(lasso_scad_cox_sim_75.out$Estimate_Beta_SCAD[1],2) ,
round(lasso_scad_cox_sim_75.out$Estimate_Beta_LASSO[1],2),
aic_bic_simulation_75.out$beta_stats$beta_1_stats[2],
"",
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[1],2),
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[1],2),
aic_bic_simulation_100.out$beta_stats$beta_1_stats[2]),
Column3 = c("",
round(lasso_scad_cox_sim_75.out$Estimate_Beta_SCAD[4],2) ,
round(lasso_scad_cox_sim_75.out$Estimate_Beta_LASSO[4],2),
aic_bic_simulation_75.out$beta_stats$beta_4_stats[2],
"",
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[4],2),
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[4],2),
aic_bic_simulation_100.out$beta_stats$beta_4_stats[2]),
Column4 = c("",round(lasso_scad_cox_sim_75.out$Estimate_Beta_SCAD[7],2) ,
round(lasso_scad_cox_sim_75.out$Estimate_Beta_LASSO[7],2),
aic_bic_simulation_75.out$beta_stats$beta_7_stats[2],
"",
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[7],2),
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[7],2),
aic_bic_simulation_100.out$beta_stats$beta_7_stats[2])
)
# Print the table using kable
kable(data, col.names = c("Method", "Beta1 SD", "Beta4 SD", "Beta7 SD"))
# Create the data for the table
data <- data.frame(
Column1 = c("**n=75**","SCAD","LASSO","AIC/BIC","**n=100**","SCAD","LASSO","AIC/BIC"),
Column2 = c("",round(lasso_scad_cox_sim_75.out$Estimate_Beta_SCAD[1],2) ,
round(lasso_scad_cox_sim_75.out$Estimate_Beta_LASSO[1],2),
round(aic_bic_simulation_75.out$beta_stats$beta_1_stats[2],2),
"",
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[1],2),
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[1],2),
round(aic_bic_simulation_100.out$beta_stats$beta_1_stats[2],2)),
Column3 = c("",
round(lasso_scad_cox_sim_75.out$Estimate_Beta_SCAD[4],2) ,
round(lasso_scad_cox_sim_75.out$Estimate_Beta_LASSO[4],2),
round(aic_bic_simulation_75.out$beta_stats$beta_4_stats[2],2),
"",
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[4],2),
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[4],2),
round(aic_bic_simulation_100.out$beta_stats$beta_4_stats[2],2)),
Column4 = c("",round(lasso_scad_cox_sim_75.out$Estimate_Beta_SCAD[7],2) ,
round(lasso_scad_cox_sim_75.out$Estimate_Beta_LASSO[7],2),
round(aic_bic_simulation_75.out$beta_stats$beta_7_stats[2],2),
"",
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[7],2),
round(lasso_scad_cox_sim_100.out$Estimate_Beta_SCAD[7],2),
round(aic_bic_simulation_100.out$beta_stats$beta_7_stats[2],2))
)
# Print the table using kable
kable(data, col.names = c("Method", "Beta1 SD", "Beta4 SD", "Beta7 SD"))
kable(head(pbc))
?pbc
ncol(pbc)
lasso_scad_cox_sim_75.out$Estimate_Beta_SCAD
lasso_scad_cox_sim_75.out$Simulate_Beta_SCAD_std
library(survival)
data(pbc)
kable(head(pbc))
