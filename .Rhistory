best_model_BIC <- results[[which.min(bic_values)]]$model
coef_lasso <- as.vector(coef(final_lasso_cox))
names(coef_lasso) <- rownames(coef(final_lasso_cox))
coef_scad_matrix <- coef(scad_cox_path, lambda = best_lambda_scad)
if (is.matrix(coef_scad_matrix)) {
coef_scad <- as.vector(coef_scad_matrix)
names(coef_scad) <- rownames(coef_scad_matrix)
} else {
coef_scad <- coef_scad_matrix
}
coef_aic <- coef(best_model_AIC)
coef_bic <- coef(best_model_BIC)
var_names <- unique(c(names(coef_lasso), names(coef_scad), names(coef_aic), names(coef_bic)))
coef_table <- data.frame(
Method = var_names,
LASSO = rep("-", length(var_names)),
SCAD = rep("-", length(var_names)),
AIC = rep("-", length(var_names)),
BIC = rep("-", length(var_names)),
stringsAsFactors = FALSE
)
rownames(coef_table) <- coef_table$Method
coef_table$Method <- NULL
for (var in var_names) {
if (var %in% names(coef_lasso)) {
coef_table[var, "LASSO"] <- sprintf("%.4f", coef_lasso[var])
}
if (var %in% names(coef_scad)) {
coef_table[var, "SCAD"] <- sprintf("%.4f", coef_scad[var])
}
if (var %in% names(coef_aic)) {
coef_table[var, "AIC"] <- sprintf("%.4f", coef_aic[var])
}
if (var %in% names(coef_bic)) {
coef_table[var, "BIC"] <- sprintf("%.4f", coef_bic[var])
}
}
coef_table[] <- lapply(coef_table, function(col) {
ifelse(col == "0.0000", "-", col)
})
coef_table
library(parallel)
scad_cox_path <- ncvsurv(x, y, penalty = "SCAD")
cv_scad_cox <- cv.ncvsurv(x, y, penalty = "SCAD")
best_lambda_scad <- cv_scad_cox$lambda.min
y <- Surv(pbc$time, pbc$status == 2)
predictor_names <- names(pbc)[!(names(pbc) %in% c("time", "status", "id"))]
combinations <- unlist(lapply(1:length(predictor_names), function(x) {
combn(predictor_names, x, simplify = FALSE)
}), recursive = FALSE)
num_cores <- 5
cl <- makeCluster(num_cores)
clusterEvalQ(cl, library(survival))
clusterExport(cl, c("pbc", "y", "combinations"))
fit_model <- function(predictors) {
formula <- as.formula(paste("y ~", paste(predictors, collapse = " + ")))
model <- coxph(formula, data = pbc)
aic <- AIC(model)
bic <- BIC(model)
return(list(model = model, AIC = aic, BIC = bic))
}
results <- parLapply(cl, combinations, fit_model)
stopCluster(cl)
aic_values <- sapply(results, function(x) x$AIC)
bic_values <- sapply(results, function(x) x$BIC)
best_model_AIC <- results[[which.min(aic_values)]]$model
best_model_BIC <- results[[which.min(bic_values)]]$model
coef_lasso <- as.vector(coef(final_lasso_cox))
names(coef_lasso) <- rownames(coef(final_lasso_cox))
coef_scad_matrix <- coef(scad_cox_path, lambda = best_lambda_scad)
if (is.matrix(coef_scad_matrix)) {
coef_scad <- as.vector(coef_scad_matrix)
names(coef_scad) <- rownames(coef_scad_matrix)
} else {
coef_scad <- coef_scad_matrix
}
coef_aic <- coef(best_model_AIC)
coef_bic <- coef(best_model_BIC)
var_names <- unique(c(names(coef_lasso), names(coef_scad), names(coef_aic), names(coef_bic)))
coef_table <- data.frame(
Method = var_names,
LASSO = rep("-", length(var_names)),
SCAD = rep("-", length(var_names)),
AIC = rep("-", length(var_names)),
BIC = rep("-", length(var_names)),
stringsAsFactors = FALSE
)
rownames(coef_table) <- coef_table$Method
coef_table$Method <- NULL
for (var in var_names) {
if (var %in% names(coef_lasso)) {
coef_table[var, "LASSO"] <- sprintf("%.4f", coef_lasso[var])
}
if (var %in% names(coef_scad)) {
coef_table[var, "SCAD"] <- sprintf("%.4f", coef_scad[var])
}
if (var %in% names(coef_aic)) {
coef_table[var, "AIC"] <- sprintf("%.4f", coef_aic[var])
}
if (var %in% names(coef_bic)) {
coef_table[var, "BIC"] <- sprintf("%.4f", coef_bic[var])
}
}
coef_table[] <- lapply(coef_table, function(col) {
ifelse(col == "0.0000", "-", col)
})
coef_table
data("pbc", package = "survival")
pbc <- na.omit(pbc)
pbc <- pbc[,-1]
pbc <- pbc[,(colnames(pbc) %in% c("age","albumin","ast","copper","edema","protime","sex","stage","time","status"))]
y <- with(pbc, Surv(time, status == 2))  # status == 2 indicates death
x <- data.matrix(pbc[, !(names(pbc) %in% c("time", "status","trig","platelet","alk.phos","spiders","hepato","trt","ascites"))])
cv_lasso_cox <- cv.glmnet(x, y, family = "cox", alpha = 1)
best_lambda <- cv_lasso_cox$lambda.min
# Fit optimal model
final_lasso_cox <- glmnet(x, y, family = "cox", alpha = 1, lambda = best_lambda)
# Fit the Cox model with all covariates
cox_model_all <- coxph(Surv(time, status == 2) ~ ., data= pbc)
# Extract and modify the summary table
cox_summary_all <- summary(cox_model_all)$coefficients
cox_summary_all <- as.data.frame(cox_summary_all)
# Define the significance level
alpha <- 0.05
# Format p-values: Bold if p-value is below alpha
cox_summary_all$p_value <- ifelse(cox_summary_all[, "Pr(>|z|)"] < alpha,
paste0("**", formatC(cox_summary_all[, "Pr(>|z|)"], format = "e", digits = 2), "**"),
formatC(cox_summary_all[, "Pr(>|z|)"], format = "e", digits = 2))
testing <- 10
library(parallel)
scad_cox_path <- ncvsurv(x, y, penalty = "SCAD")
cv_scad_cox <- cv.ncvsurv(x, y, penalty = "SCAD")
best_lambda_scad <- cv_scad_cox$lambda.min
y <- Surv(pbc$time, pbc$status == 2)
predictor_names <- names(pbc)[!(names(pbc) %in% c("time", "status", "id"))]
combinations <- unlist(lapply(1:length(predictor_names), function(x) {
combn(predictor_names, x, simplify = FALSE)
}), recursive = FALSE)
num_cores <- 5
cl <- makeCluster(num_cores)
clusterEvalQ(cl, library(survival))
clusterExport(cl, c("pbc", "y", "combinations"))
fit_model <- function(predictors) {
formula <- as.formula(paste("y ~", paste(predictors, collapse = " + ")))
model <- coxph(formula, data = pbc)
aic <- AIC(model)
bic <- BIC(model)
return(list(model = model, AIC = aic, BIC = bic))
}
results <- parLapply(cl, combinations, fit_model)
stopCluster(cl)
aic_values <- sapply(results, function(x) x$AIC)
bic_values <- sapply(results, function(x) x$BIC)
best_model_AIC <- results[[which.min(aic_values)]]$model
best_model_BIC <- results[[which.min(bic_values)]]$model
coef_lasso <- as.vector(coef(final_lasso_cox))
names(coef_lasso) <- rownames(coef(final_lasso_cox))
coef_scad_matrix <- coef(scad_cox_path, lambda = best_lambda_scad)
if (is.matrix(coef_scad_matrix)) {
coef_scad <- as.vector(coef_scad_matrix)
names(coef_scad) <- rownames(coef_scad_matrix)
} else {
coef_scad <- coef_scad_matrix
}
coef_aic <- coef(best_model_AIC)
coef_bic <- coef(best_model_BIC)
var_names <- unique(c(names(coef_lasso), names(coef_scad), names(coef_aic), names(coef_bic)))
coef_table <- data.frame(
Method = var_names,
LASSO = rep("-", length(var_names)),
SCAD = rep("-", length(var_names)),
AIC = rep("-", length(var_names)),
BIC = rep("-", length(var_names)),
stringsAsFactors = FALSE
)
rownames(coef_table) <- coef_table$Method
coef_table$Method <- NULL
for (var in var_names) {
if (var %in% names(coef_lasso)) {
coef_table[var, "LASSO"] <- sprintf("%.4f", coef_lasso[var])
}
if (var %in% names(coef_scad)) {
coef_table[var, "SCAD"] <- sprintf("%.4f", coef_scad[var])
}
if (var %in% names(coef_aic)) {
coef_table[var, "AIC"] <- sprintf("%.4f", coef_aic[var])
}
if (var %in% names(coef_bic)) {
coef_table[var, "BIC"] <- sprintf("%.4f", coef_bic[var])
}
}
coef_table[] <- lapply(coef_table, function(col) {
ifelse(col == "0.0000", "-", col)
})
#| label: tbl-six
kable(coef_table,caption = "Coefficient Estimates with Various Estimation Methods")
data("pbc", package = "survival")
pbc <- na.omit(pbc)
pbc <- pbc[,-1]
pbc <- pbc[,(colnames(pbc) %in% c("age","albumin","ast","copper","edema","protime","sex","stage","time","status"))]
y <- with(pbc, Surv(time, status == 2))  # status == 2 indicates death
x <- data.matrix(pbc[, !(names(pbc) %in% c("time", "status","trig","platelet","alk.phos","spiders","hepato","trt","ascites"))])
cv_lasso_cox <- cv.glmnet(x, y, family = "cox", alpha = 1)
best_lambda <- cv_lasso_cox$lambda.min
# Fit optimal model
final_lasso_cox <- glmnet(x, y, family = "cox", alpha = 1, lambda = best_lambda)
# Fit the Cox model with all covariates
cox_model_all <- coxph(Surv(time, status == 2) ~ ., data= pbc)
# Extract and modify the summary table
cox_summary_all <- summary(cox_model_all)$coefficients
cox_summary_all <- as.data.frame(cox_summary_all)
# Define the significance level
alpha <- 0.05
# Format p-values: Bold if p-value is below alpha
cox_summary_all$p_value <- ifelse(cox_summary_all[, "Pr(>|z|)"] < alpha,
paste0("**", formatC(cox_summary_all[, "Pr(>|z|)"], format = "e", digits = 2), "**"),
formatC(cox_summary_all[, "Pr(>|z|)"], format = "e", digits = 2))
testing <- 10
library(parallel)
scad_cox_path <- ncvsurv(x, y, penalty = "SCAD")
cv_scad_cox <- cv.ncvsurv(x, y, penalty = "SCAD")
best_lambda_scad <- cv_scad_cox$lambda.min
y <- Surv(pbc$time, pbc$status == 2)
predictor_names <- names(pbc)[!(names(pbc) %in% c("time", "status", "id"))]
combinations <- unlist(lapply(1:length(predictor_names), function(x) {
combn(predictor_names, x, simplify = FALSE)
}), recursive = FALSE)
num_cores <- 5
cl <- makeCluster(num_cores)
clusterEvalQ(cl, library(survival))
clusterExport(cl, c("pbc", "y", "combinations"))
fit_model <- function(predictors) {
formula <- as.formula(paste("y ~", paste(predictors, collapse = " + ")))
model <- coxph(formula, data = pbc)
aic <- AIC(model)
bic <- BIC(model)
return(list(model = model, AIC = aic, BIC = bic))
}
results <- parLapply(cl, combinations, fit_model)
stopCluster(cl)
aic_values <- sapply(results, function(x) x$AIC)
bic_values <- sapply(results, function(x) x$BIC)
best_model_AIC <- results[[which.min(aic_values)]]$model
best_model_BIC <- results[[which.min(bic_values)]]$model
coef_lasso <- as.vector(coef(final_lasso_cox))
names(coef_lasso) <- rownames(coef(final_lasso_cox))
coef_scad_matrix <- coef(scad_cox_path, lambda = best_lambda_scad)
if (is.matrix(coef_scad_matrix)) {
coef_scad <- as.vector(coef_scad_matrix)
names(coef_scad) <- rownames(coef_scad_matrix)
} else {
coef_scad <- coef_scad_matrix
}
coef_aic <- coef(best_model_AIC)
coef_bic <- coef(best_model_BIC)
var_names <- unique(c(names(coef_lasso), names(coef_scad), names(coef_aic), names(coef_bic)))
coef_table <- data.frame(
Method = var_names,
LASSO = rep("-", length(var_names)),
SCAD = rep("-", length(var_names)),
AIC = rep("-", length(var_names)),
BIC = rep("-", length(var_names)),
stringsAsFactors = FALSE
)
rownames(coef_table) <- coef_table$Method
coef_table$Method <- NULL
for (var in var_names) {
if (var %in% names(coef_lasso)) {
coef_table[var, "LASSO"] <- sprintf("%.4f", coef_lasso[var])
}
if (var %in% names(coef_scad)) {
coef_table[var, "SCAD"] <- sprintf("%.4f", coef_scad[var])
}
if (var %in% names(coef_aic)) {
coef_table[var, "AIC"] <- sprintf("%.4f", coef_aic[var])
}
if (var %in% names(coef_bic)) {
coef_table[var, "BIC"] <- sprintf("%.4f", coef_bic[var])
}
}
coef_table[] <- lapply(coef_table, function(col) {
ifelse(col == "0.0000", "-", col)
})
coef_table
data("pbc", package = "survival")
pbc <- na.omit(pbc)
pbc <- pbc[,-1]
pbc <- pbc[,(colnames(pbc) %in% c("age","albumin","ast","copper","edema","protime","sex","stage","time","status"))]
y <- with(pbc, Surv(time, status == 2))  # status == 2 indicates death
x <- data.matrix(pbc[, !(names(pbc) %in% c("time", "status","trig","platelet","alk.phos","spiders","hepato","trt","ascites"))])
cv_lasso_cox <- cv.glmnet(x, y, family = "cox", alpha = 1)
best_lambda <- cv_lasso_cox$lambda.min
# Fit optimal model
final_lasso_cox <- glmnet(x, y, family = "cox", alpha = 1, lambda = best_lambda)
# Fit the Cox model with all covariates
cox_model_all <- coxph(Surv(time, status == 2) ~ ., data= pbc)
# Extract and modify the summary table
cox_summary_all <- summary(cox_model_all)$coefficients
cox_summary_all <- as.data.frame(cox_summary_all)
# Define the significance level
alpha <- 0.05
# Format p-values: Bold if p-value is below alpha
cox_summary_all$p_value <- ifelse(cox_summary_all[, "Pr(>|z|)"] < alpha,
paste0("**", formatC(cox_summary_all[, "Pr(>|z|)"], format = "e", digits = 2), "**"),
formatC(cox_summary_all[, "Pr(>|z|)"], format = "e", digits = 2))
testing <- 10
library(parallel)
scad_cox_path <- ncvsurv(x, y, penalty = "SCAD")
cv_scad_cox <- cv.ncvsurv(x, y, penalty = "SCAD")
best_lambda_scad <- cv_scad_cox$lambda.min
y <- Surv(pbc$time, pbc$status == 2)
predictor_names <- names(pbc)[!(names(pbc) %in% c("time", "status", "id"))]
combinations <- unlist(lapply(1:length(predictor_names), function(x) {
combn(predictor_names, x, simplify = FALSE)
}), recursive = FALSE)
num_cores <- 5
cl <- makeCluster(num_cores)
clusterEvalQ(cl, library(survival))
clusterExport(cl, c("pbc", "y", "combinations"))
fit_model <- function(predictors) {
formula <- as.formula(paste("y ~", paste(predictors, collapse = " + ")))
model <- coxph(formula, data = pbc)
aic <- AIC(model)
bic <- BIC(model)
return(list(model = model, AIC = aic, BIC = bic))
}
results <- parLapply(cl, combinations, fit_model)
stopCluster(cl)
aic_values <- sapply(results, function(x) x$AIC)
bic_values <- sapply(results, function(x) x$BIC)
best_model_AIC <- results[[which.min(aic_values)]]$model
best_model_BIC <- results[[which.min(bic_values)]]$model
coef_lasso <- as.vector(coef(final_lasso_cox))
names(coef_lasso) <- rownames(coef(final_lasso_cox))
coef_scad_matrix <- coef(scad_cox_path, lambda = best_lambda_scad)
if (is.matrix(coef_scad_matrix)) {
coef_scad <- as.vector(coef_scad_matrix)
names(coef_scad) <- rownames(coef_scad_matrix)
} else {
coef_scad <- coef_scad_matrix
}
coef_aic <- coef(best_model_AIC)
coef_bic <- coef(best_model_BIC)
var_names <- unique(c(names(coef_lasso), names(coef_scad), names(coef_aic), names(coef_bic)))
coef_table <- data.frame(
Method = var_names,
LASSO = rep("-", length(var_names)),
SCAD = rep("-", length(var_names)),
AIC = rep("-", length(var_names)),
BIC = rep("-", length(var_names)),
stringsAsFactors = FALSE
)
rownames(coef_table) <- coef_table$Method
coef_table$Method <- NULL
for (var in var_names) {
if (var %in% names(coef_lasso)) {
coef_table[var, "LASSO"] <- sprintf("%.4f", coef_lasso[var])
}
if (var %in% names(coef_scad)) {
coef_table[var, "SCAD"] <- sprintf("%.4f", coef_scad[var])
}
if (var %in% names(coef_aic)) {
coef_table[var, "AIC"] <- sprintf("%.4f", coef_aic[var])
}
if (var %in% names(coef_bic)) {
coef_table[var, "BIC"] <- sprintf("%.4f", coef_bic[var])
}
}
coef_table[] <- lapply(coef_table, function(col) {
ifelse(col == "0.0000", "-", col)
})
coef_table
set.seed(87460945)
data("pbc", package = "survival")
pbc <- na.omit(pbc)
pbc <- pbc[,-1]
pbc <- pbc[,(colnames(pbc) %in% c("age","albumin","ast","copper","edema","protime","sex","stage","time","status"))]
y <- with(pbc, Surv(time, status == 2))  # status == 2 indicates death
x <- data.matrix(pbc[, !(names(pbc) %in% c("time", "status","trig","platelet","alk.phos","spiders","hepato","trt","ascites"))])
cv_lasso_cox <- cv.glmnet(x, y, family = "cox", alpha = 1)
best_lambda <- cv_lasso_cox$lambda.min
# Fit optimal model
final_lasso_cox <- glmnet(x, y, family = "cox", alpha = 1, lambda = best_lambda)
# Fit the Cox model with all covariates
cox_model_all <- coxph(Surv(time, status == 2) ~ ., data= pbc)
# Extract and modify the summary table
cox_summary_all <- summary(cox_model_all)$coefficients
cox_summary_all <- as.data.frame(cox_summary_all)
# Define the significance level
alpha <- 0.05
# Format p-values: Bold if p-value is below alpha
cox_summary_all$p_value <- ifelse(cox_summary_all[, "Pr(>|z|)"] < alpha,
paste0("**", formatC(cox_summary_all[, "Pr(>|z|)"], format = "e", digits = 2), "**"),
formatC(cox_summary_all[, "Pr(>|z|)"], format = "e", digits = 2))
library(parallel)
set.seed(87460945)
scad_cox_path <- ncvsurv(x, y, penalty = "SCAD")
cv_scad_cox <- cv.ncvsurv(x, y, penalty = "SCAD")
best_lambda_scad <- cv_scad_cox$lambda.min
y <- Surv(pbc$time, pbc$status == 2)
predictor_names <- names(pbc)[!(names(pbc) %in% c("time", "status", "id"))]
combinations <- unlist(lapply(1:length(predictor_names), function(x) {
combn(predictor_names, x, simplify = FALSE)
}), recursive = FALSE)
num_cores <- 5
cl <- makeCluster(num_cores)
clusterEvalQ(cl, library(survival))
clusterExport(cl, c("pbc", "y", "combinations"))
fit_model <- function(predictors) {
formula <- as.formula(paste("y ~", paste(predictors, collapse = " + ")))
model <- coxph(formula, data = pbc)
aic <- AIC(model)
bic <- BIC(model)
return(list(model = model, AIC = aic, BIC = bic))
}
results <- parLapply(cl, combinations, fit_model)
stopCluster(cl)
aic_values <- sapply(results, function(x) x$AIC)
bic_values <- sapply(results, function(x) x$BIC)
best_model_AIC <- results[[which.min(aic_values)]]$model
best_model_BIC <- results[[which.min(bic_values)]]$model
coef_lasso <- as.vector(coef(final_lasso_cox))
names(coef_lasso) <- rownames(coef(final_lasso_cox))
coef_scad_matrix <- coef(scad_cox_path, lambda = best_lambda_scad)
if (is.matrix(coef_scad_matrix)) {
coef_scad <- as.vector(coef_scad_matrix)
names(coef_scad) <- rownames(coef_scad_matrix)
} else {
coef_scad <- coef_scad_matrix
}
coef_aic <- coef(best_model_AIC)
coef_bic <- coef(best_model_BIC)
var_names <- unique(c(names(coef_lasso), names(coef_scad), names(coef_aic), names(coef_bic)))
coef_table <- data.frame(
Method = var_names,
LASSO = rep("-", length(var_names)),
SCAD = rep("-", length(var_names)),
AIC = rep("-", length(var_names)),
BIC = rep("-", length(var_names)),
stringsAsFactors = FALSE
)
rownames(coef_table) <- coef_table$Method
coef_table$Method <- NULL
for (var in var_names) {
if (var %in% names(coef_lasso)) {
coef_table[var, "LASSO"] <- sprintf("%.4f", coef_lasso[var])
}
if (var %in% names(coef_scad)) {
coef_table[var, "SCAD"] <- sprintf("%.4f", coef_scad[var])
}
if (var %in% names(coef_aic)) {
coef_table[var, "AIC"] <- sprintf("%.4f", coef_aic[var])
}
if (var %in% names(coef_bic)) {
coef_table[var, "BIC"] <- sprintf("%.4f", coef_bic[var])
}
}
coef_table[] <- lapply(coef_table, function(col) {
ifelse(col == "0.0000", "-", col)
})
coef_table
#| label: tbl-five
cox_summary_all[,-ncol(cox_summary_all)] <- lapply(cox_summary_all[,-ncol(cox_summary_all)], function(x){round(x,4)})
cox_summary_all$coef <- cox_summary_all$coef |> as.character()
kable(cox_summary_all,caption="Cox Proportional Hazards model summary output. Varaibles found to be significant at the 5% level are bold.")
#| label: tbl-six
kable(coef_table,caption = "Coefficient Estimates with Various Estimation Methods")
data("pbc", package = "survival")
pbc <- na.omit(pbc)
pbc <- pbc[,-1]
pbc <- pbc[,(colnames(pbc) %in% c("age","albumin","ast","copper","edema","protime","sex","stage","time","status"))]
y <- with(pbc, Surv(time, status == 2))  # status == 2 indicates death
x <- data.matrix(pbc[, !(names(pbc) %in% c("time", "status","trig","platelet","alk.phos","spiders","hepato","trt","ascites"))])
cv_lasso_cox <- cv.glmnet(x, y, family = "cox", alpha = 1)
best_lambda <- cv_lasso_cox$lambda.min
# Fit optimal model
final_lasso_cox <- glmnet(x, y, family = "cox", alpha = 1, lambda = best_lambda)
# Fit the Cox model with all covariates
cox_model_all <- coxph(Surv(time, status == 2) ~ ., data= pbc)
# Extract and modify the summary table
cox_summary_all <- summary(cox_model_all)$coefficients
cox_summary_all <- as.data.frame(cox_summary_all)
# Define the significance level
alpha <- 0.05
# Format p-values: Bold if p-value is below alpha
cox_summary_all$p_value <- ifelse(cox_summary_all[, "Pr(>|z|)"] < alpha,
paste0("**", formatC(cox_summary_all[, "Pr(>|z|)"], format = "e", digits = 2), "**"),
formatC(cox_summary_all[, "Pr(>|z|)"], format = "e", digits = 2))
set.seed(87460945)
data("pbc", package = "survival")
pbc <- na.omit(pbc)
pbc <- pbc[,-1]
pbc <- pbc[,(colnames(pbc) %in% c("age","albumin","ast","copper","edema","protime","sex","stage","time","status"))]
pbc$sex <- factor(pbc$sex)
y <- with(pbc, Surv(time, status == 2))  # status == 2 indicates death
x <- data.matrix(pbc[, !(names(pbc) %in% c("time", "status","trig","platelet","alk.phos","spiders","hepato","trt","ascites"))])
cv_lasso_cox <- cv.glmnet(x, y, family = "cox", alpha = 1)
best_lambda <- cv_lasso_cox$lambda.min
# Fit optimal model
final_lasso_cox <- glmnet(x, y, family = "cox", alpha = 1, lambda = best_lambda)
# Fit the Cox model with all covariates
cox_model_all <- coxph(Surv(time, status == 2) ~ ., data= pbc)
# Extract and modify the summary table
cox_summary_all <- summary(cox_model_all)$coefficients
cox_summary_all <- as.data.frame(cox_summary_all)
# Define the significance level
alpha <- 0.05
# Format p-values: Bold if p-value is below alpha
cox_summary_all$p_value <- ifelse(cox_summary_all[, "Pr(>|z|)"] < alpha,
paste0("**", formatC(cox_summary_all[, "Pr(>|z|)"], format = "e", digits = 2), "**"),
formatC(cox_summary_all[, "Pr(>|z|)"], format = "e", digits = 2))
cox_summary_all
